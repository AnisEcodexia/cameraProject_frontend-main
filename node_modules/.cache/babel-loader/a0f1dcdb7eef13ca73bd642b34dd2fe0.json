{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\cameraProject_frontend-main\\\\src\\\\components\\\\ImgDropAndCrop.js\";\nimport React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport './custom-image-crop.css';\nimport { base64StringtoFile, downloadBase64File, extractImageFileExtensionFromBase64, image64toCanvasRef } from './ResuableUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageMaxSize = 1000000000; // bytes\n\nconst acceptedFileTypes = 'image/x-png, image/png, image/jpg, image/jpeg, image/gif';\nconst acceptedFileTypesArray = acceptedFileTypes.split(\",\").map(item => {\n  return item.trim();\n});\n\nclass ImgDropAndCrop extends Component {\n  constructor(props) {\n    super(props);\n\n    this.verifyFile = files => {\n      if (files && files.length > 0) {\n        const currentFile = files[0];\n        const currentFileType = currentFile.type;\n        const currentFileSize = currentFile.size;\n\n        if (currentFileSize > imageMaxSize) {\n          alert(\"This file is not allowed. \" + currentFileSize + \" bytes is too large\");\n          return false;\n        }\n\n        if (!acceptedFileTypesArray.includes(currentFileType)) {\n          alert(\"This file is not allowed. Only images are allowed.\");\n          return false;\n        }\n\n        return true;\n      }\n    };\n\n    this.handleOnDrop = (files, rejectedFiles) => {\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        this.verifyFile(rejectedFiles);\n      }\n\n      if (files && files.length > 0) {\n        const isVerified = this.verifyFile(files);\n\n        if (isVerified) {\n          // imageBase64Data \n          const currentFile = files[0];\n          const myFileItemReader = new FileReader();\n          myFileItemReader.addEventListener(\"load\", () => {\n            // console.log(myFileItemReader.result)\n            const myResult = myFileItemReader.result;\n            this.setState({\n              imgSrc: myResult,\n              imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n            });\n          }, false);\n          myFileItemReader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.handleImageLoaded = image => {//console.log(image)\n    };\n\n    this.handleOnCropChange = crop => {\n      this.setState({\n        crop: crop\n      });\n    };\n\n    this.handleOnCropComplete = (crop, pixelCrop) => {\n      //console.log(crop, pixelCrop)\n      const canvasRef = this.imagePreviewCanvasRef.current;\n      const {\n        imgSrc\n      } = this.state;\n      image64toCanvasRef(canvasRef, imgSrc, pixelCrop);\n    };\n\n    this.handleDownloadClick = event => {\n      console.log(\"zebi\");\n      const {\n        imgSrc\n      } = this.state;\n\n      if (imgSrc) {\n        const canvasRef = this.imagePreviewCanvasRef.current;\n        const {\n          imgSrcExt\n        } = this.state;\n        const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt);\n        const myFilename = \"previewFile.\" + imgSrcExt; // file to be uploaded\n\n        const myNewCroppedFile = base64StringtoFile(imageData64, myFilename);\n        console.log(myNewCroppedFile); // download file\n\n        downloadBase64File(imageData64, myFilename);\n        this.handleClearToDefault();\n      }\n    };\n\n    this.handleClearToDefault = event => {\n      if (event) event.preventDefault();\n      const canvas = this.imagePreviewCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      this.setState({\n        imgSrc: null,\n        imgSrcExt: null,\n        crop: {\n          aspect: 1 / 1\n        }\n      });\n      this.fileInputRef.current.value = null;\n    };\n\n    this.handleFileSelect = event => {\n      // console.log(event)\n      const files = event.target.files;\n\n      if (files && files.length > 0) {\n        const isVerified = this.verifyFile(files);\n\n        if (isVerified) {\n          // imageBase64Data \n          const currentFile = files[0];\n          const myFileItemReader = new FileReader();\n          myFileItemReader.addEventListener(\"load\", () => {\n            // console.log(myFileItemReader.result)\n            const myResult = myFileItemReader.result;\n            this.setState({\n              imgSrc: myResult,\n              imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n            });\n          }, false);\n          myFileItemReader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.imagePreviewCanvasRef = /*#__PURE__*/React.createRef();\n    this.fileInputRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      imgSrc: null,\n      imgSrcExt: null,\n      crop: {\n        aspect: 2 / 3\n      }\n    };\n  }\n\n  render() {\n    const {\n      imgSrc\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Video Zoning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: this.fileInputRef,\n        type: \"file\",\n        accept: acceptedFileTypes,\n        multiple: false,\n        onChange: this.handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), imgSrc !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ReactCrop, {\n          src: imgSrc,\n          crop: this.state.crop,\n          onImageLoaded: this.handleImageLoaded,\n          onComplete: this.handleOnCropComplete,\n          onChange: this.handleOnCropChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Preview Canvas Crop \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.imagePreviewCanvasRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleDownloadClick,\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClearToDefault,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Dropzone, {\n        onDrop: this.handleOnDrop,\n        accept: acceptedFileTypes,\n        multiple: false,\n        maxSize: imageMaxSize,\n        children: dropzoneProps => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Drop some files here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 19\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ImgDropAndCrop;","map":{"version":3,"names":["React","Component","Dropzone","ReactCrop","base64StringtoFile","downloadBase64File","extractImageFileExtensionFromBase64","image64toCanvasRef","imageMaxSize","acceptedFileTypes","acceptedFileTypesArray","split","map","item","trim","ImgDropAndCrop","constructor","props","verifyFile","files","length","currentFile","currentFileType","type","currentFileSize","size","alert","includes","handleOnDrop","rejectedFiles","isVerified","myFileItemReader","FileReader","addEventListener","myResult","result","setState","imgSrc","imgSrcExt","readAsDataURL","handleImageLoaded","image","handleOnCropChange","crop","handleOnCropComplete","pixelCrop","canvasRef","imagePreviewCanvasRef","current","state","handleDownloadClick","event","console","log","imageData64","toDataURL","myFilename","myNewCroppedFile","handleClearToDefault","preventDefault","canvas","ctx","getContext","clearRect","width","height","aspect","fileInputRef","value","handleFileSelect","target","createRef","render","dropzoneProps"],"sources":["C:/Users/user/Documents/cameraProject_frontend-main/src/components/ImgDropAndCrop.js"],"sourcesContent":["import React, { Component } from 'react'\n\nimport Dropzone from 'react-dropzone'\nimport ReactCrop from 'react-image-crop'\nimport './custom-image-crop.css';\n\nimport {base64StringtoFile,\n    downloadBase64File,\n    extractImageFileExtensionFromBase64,\n    image64toCanvasRef} from './ResuableUtils'\n\nconst imageMaxSize = 1000000000 // bytes\nconst acceptedFileTypes = 'image/x-png, image/png, image/jpg, image/jpeg, image/gif'\nconst acceptedFileTypesArray = acceptedFileTypes.split(\",\").map((item) => {return item.trim()})\nclass ImgDropAndCrop extends Component {\n    constructor(props){\n        super(props)\n        this.imagePreviewCanvasRef = React.createRef()\n        this.fileInputRef = React.createRef()\n        this.state = {\n            imgSrc: null,\n            imgSrcExt: null,\n            crop: {\n                aspect: 2/3\n            }\n        }\n    }\n\n    verifyFile = (files) => {\n        if (files && files.length > 0){\n            const currentFile = files[0]\n            const currentFileType = currentFile.type\n            const currentFileSize = currentFile.size\n            if(currentFileSize > imageMaxSize) {\n                alert(\"This file is not allowed. \" + currentFileSize + \" bytes is too large\")\n                return false\n            }\n            if (!acceptedFileTypesArray.includes(currentFileType)){\n                alert(\"This file is not allowed. Only images are allowed.\")\n                return false\n            }\n            return true\n        }\n    }\n\n    handleOnDrop = (files, rejectedFiles) => {\n        if (rejectedFiles && rejectedFiles.length > 0){\n            this.verifyFile(rejectedFiles)\n        }\n\n\n        if (files && files.length > 0){\n             const isVerified = this.verifyFile(files)\n             if (isVerified){\n                 // imageBase64Data \n                 const currentFile = files[0]\n                 const myFileItemReader = new FileReader()\n                 myFileItemReader.addEventListener(\"load\", ()=>{\n                     // console.log(myFileItemReader.result)\n                     const myResult = myFileItemReader.result\n                     this.setState({\n                         imgSrc: myResult,\n                         imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n                     })\n                 }, false)\n\n                 myFileItemReader.readAsDataURL(currentFile)\n\n             }\n        }\n    }\n\n\n    handleImageLoaded = (image) => {\n        //console.log(image)\n    }\n    handleOnCropChange = (crop) => {\n        this.setState({crop:crop})\n    }\n    handleOnCropComplete = (crop, pixelCrop) =>{\n        //console.log(crop, pixelCrop)\n\n        const canvasRef = this.imagePreviewCanvasRef.current\n        const {imgSrc}  = this.state\n        image64toCanvasRef(canvasRef, imgSrc, pixelCrop)\n    }\n    handleDownloadClick = (event) => {\n        console.log(\"zebi\");\n        const {imgSrc}  = this.state\n        if (imgSrc) {\n            const canvasRef = this.imagePreviewCanvasRef.current\n        \n            const {imgSrcExt} =  this.state\n            const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt)\n\n      \n            const myFilename = \"previewFile.\" + imgSrcExt\n\n            // file to be uploaded\n            const myNewCroppedFile = base64StringtoFile(imageData64, myFilename)\n            console.log(myNewCroppedFile)\n            // download file\n            downloadBase64File(imageData64, myFilename)\n            this.handleClearToDefault()\n        }\n        \n\n    }\n\n    handleClearToDefault = event =>{\n        if (event) event.preventDefault()\n        const canvas = this.imagePreviewCanvasRef.current\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n        this.setState({\n            imgSrc: null,\n            imgSrcExt: null,\n            crop: {\n                aspect: 1/1\n            }\n\n        })\n        this.fileInputRef.current.value = null\n    }\n\n    handleFileSelect = event => {\n        // console.log(event)\n        const files = event.target.files\n        if (files && files.length > 0){\n              const isVerified = this.verifyFile(files)\n             if (isVerified){\n                 // imageBase64Data \n                 const currentFile = files[0]\n                 const myFileItemReader = new FileReader()\n                 myFileItemReader.addEventListener(\"load\", ()=>{\n                     // console.log(myFileItemReader.result)\n                     const myResult = myFileItemReader.result\n                     this.setState({\n                         imgSrc: myResult,\n                         imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n                     })\n                 }, false)\n\n                 myFileItemReader.readAsDataURL(currentFile)\n\n             }\n        }\n    }\n  render () {\n      const {imgSrc} = this.state\n    return (\n      <div>\n        <h1>Video Zoning</h1>\n\n        <input ref={this.fileInputRef} type='file' accept={acceptedFileTypes} multiple={false} onChange={this.handleFileSelect} />\n        {imgSrc !== null ? \n            <div>\n               \n\n                 <ReactCrop \n                     src={imgSrc} \n                     crop={this.state.crop} \n                     onImageLoaded={this.handleImageLoaded}\n                     onComplete = {this.handleOnCropComplete}\n                     onChange={this.handleOnCropChange}/>\n\n                  <br/>\n                  <p>Preview Canvas Crop </p>\n                  <canvas ref={this.imagePreviewCanvasRef}></canvas>\n                  <button onClick={this.handleDownloadClick}>Download</button>\n                  <button onClick={this.handleClearToDefault}>Clear</button>\n              </div>\n\n           : \n\n             <Dropzone onDrop={this.handleOnDrop} accept={acceptedFileTypes} multiple={false} maxSize={imageMaxSize}>{dropzoneProps => {\n                return (\n                  <div>\n                    <p>Drop some files here</p>\n                  </div>\n                );\n              }}</Dropzone>\n         }\n        \n      </div>\n    )\n  }\n}\n\nexport default ImgDropAndCrop\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}