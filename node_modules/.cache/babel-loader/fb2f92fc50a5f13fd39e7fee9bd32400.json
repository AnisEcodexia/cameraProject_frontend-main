{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: 0,\n  imageSrc: ''\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    uploadImage: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","imageSrc","counterSlice","name","reducers","increment","state","decrement","uploadImage","incrementByAmount","action","payload","actions","reducer"],"sources":["C:/Users/user/Downloads/cameraProject_frontend-main-master/cameraProject_frontend-main-master/src/features/counter/counterSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  imageSrc:''\r\n}\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    uploadImage: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },\r\n    \r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CADY;EAEnBC,QAAQ,EAAC;AAFU,CAArB;AAKA,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EACtCK,IAAI,EAAE,SADgC;EAEtCJ,YAFsC;EAGtCK,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACN,KAAN,IAAe,CAAf;IACD,CAPO;IAQRO,SAAS,EAAGD,KAAD,IAAW;MACpBA,KAAK,CAACN,KAAN,IAAe,CAAf;IACD,CAVO;IAWRQ,WAAW,EAAGF,KAAD,IAAW;MACtBA,KAAK,CAACN,KAAN,IAAe,CAAf;IACD,CAbO;IAcRS,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;MACpCJ,KAAK,CAACN,KAAN,IAAeU,MAAM,CAACC,OAAtB;IACD;EAhBO;AAH4B,CAAD,CAAhC,C,CAwBP;;AACA,OAAO,MAAM;EAAEN,SAAF;EAAaE,SAAb;EAAwBE;AAAxB,IAA8CP,YAAY,CAACU,OAAjE;AAEP,eAAeV,YAAY,CAACW,OAA5B"},"metadata":{},"sourceType":"module"}